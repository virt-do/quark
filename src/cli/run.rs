extern crate execute;
use crate::{
    config::{read_config_from_file, QuarkConfig},
    helper::extract_quardle,
};

use super::{Handler, Result};
use clap::Args;

use std::process::Command;

use log::{info, LevelFilter};

/// Arguments for `RunCommand`
///
/// Usage :
/// `quark run --quardle <QUARDLE> --output <OUTPUT>`
#[derive(Debug, Args)]
pub struct RunCommand {
    /// Location of the quardle
    #[clap(short, long)]
    quardle: String,

    /// Folder containing the files generated by the quarks necessary to work
    #[clap(short, long)]
    output: String,

    /// If set, the command will be executed silently.
    #[clap(long)]
    quiet: bool,
}

/// Method that will be called when the command is executed.
#[allow(clippy::useless_format)]
impl Handler for RunCommand {
    fn handler(&self, logger: &mut env_logger::Builder) -> Result<()> {
        // Change logger behavior and init it
        // If the logger was not initialized, nothing will be displayed into the console.
        if self.quiet {
            logger.filter_level(LevelFilter::Off);
        }
        logger.init();

        extract_quardle(&self.output, &self.quardle)?;

        info!("Start lumper...");
        let quark_path = format!("{}/quark.json", &self.output);
        let config: QuarkConfig = read_config_from_file(quark_path).unwrap();

        let mut child = Command::new("./lumper")
            .arg("-k")
            .arg(format!("{}/{}", &self.output, config.kernel))
            .arg("--cmdline")
            .arg(format!("{}", config.kernel_cmdline))
            .arg("--initramfs")
            .arg(format!("{}/{}", &self.output, config.initramfs))
            .spawn()
            .expect("lumper faild to start");

        child.wait().expect("failed to wait on child");

        Ok(())
    }
}
